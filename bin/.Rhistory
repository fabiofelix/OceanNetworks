dataset2[, "aux"] = as.numeric(as.matrix(dataset2[, "idade_i"]))
dataset2 = dataset2[, c(1, 2, 13, 4:12)]
colnames(dataset2)[3] = "idade_i"
#Inicializando as linhas que possuem valor NA nas colunas sexo_i, class_glasgow, PAS, FR, RTS_UE, ISS_UE, triss_UE, NISS_UE, NTRISS_UE
dataset2[is.na(dataset2)] = 0
#Remocao de linhas que possuem valores no campo condicao_alta_i que nao 'possuem' significado
dataset2 = dataset2[dataset2$condicao_alta_i != "6",]
dataset2 = dataset2[dataset2$condicao_alta_i != "7",]
dataset2 = dataset2[dataset2$condicao_alta_i != "8",]
#Juncao de valores parecidos no campo condicao_alta_i
dataset2[dataset2$condicao_alta_i == "1 - Obito", "condicao_alta_i"] = "Obito"
dataset2[dataset2$condicao_alta_i == "obito", "condicao_alta_i"] = "Obito"
dataset2[dataset2$condicao_alta_i == "2", "condicao_alta_i"] = "Estado Vegetativo Persistente"
dataset2[dataset2$condicao_alta_i == "2 - Estado Vegetativo Persistente", "condicao_alta_i"] = "Estado Vegetativo Persistente"
dataset2[dataset2$condicao_alta_i == "3 - Limitacao Graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "limitacoes graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "4 - Limitacoes Moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "limitacoes moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "5 - Boa Recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "boa recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "alta a pedido", "condicao_alta_i"] = "Alta a Pedido"
dataset2[dataset2$condicao_alta_i == "evasao", "condicao_alta_i"] = "Evasao"
dataset2[dataset2$condicao_alta_i == "transferencia", "condicao_alta_i"] = "Transferencia"
#Desconsiderar condicao_alta_i = (Alta a Pedido, Evasao, Transferencia)
dataset2 = dataset2[dataset2$condicao_alta_i != "Alta a Pedido",]
dataset2 = dataset2[dataset2$condicao_alta_i != "Evasao",]
dataset2 = dataset2[dataset2$condicao_alta_i != "Transferencia",]
#
dataset2$condicao_alta_i = droplevels(dataset2$condicao_alta_i)
dataset  = read.csv("~/Documentos/Mestrado/Pesquisa/HC/projeto teste/R/data/saradataset_7-19-2016.csv", sep=";", quote="")
#-------------------------------------------------------------------------#
#                   LIMPEZA E AJUSTE DOS DADOS
#-------------------------------------------------------------------------#
#ordem, sexo_i, idade_i, class_glasgow, PAS, FR, RTS_UE, ISS_UE, triss_UE, NISS_UE, NTRISS_UE, condicao_alta_i
dataset2 = dataset[, c(1, 20, 7, 66, 67, 68, 92, 90, 93, 91, 95, 37)]
#Removendo linhas com sexo_i = D
dataset2 = dataset2[dataset2$sexo_i != "D",]
dataset2$sexo_i = droplevels(dataset2$sexo_i)
#Tratanto sexo como inteiro (F = 0, M = 1)
levels(dataset2$sexo_i) = c(levels(dataset2$sexo_i), 0, 1)
dataset2[dataset2$sexo_i == "F", "sexo_i"] = 0
dataset2[dataset2$sexo_i == "M", "sexo_i"] = 1
dataset2$sexo_i = droplevels(dataset2$sexo_i)
dataset2[, "aux"] = as.numeric(as.matrix(dataset2[, "sexo_i"]))
dataset2 = dataset2[, c(1, 13, 3:12)]
colnames(dataset2)[2] = "sexo_i"
#Algumas linhas tem idade NULL e o campo quando e carregado nao fica com tipo numerico
dataset2 = dataset2[dataset2$idade_i != "NULL",]
dataset2[, "aux"] = as.numeric(as.matrix(dataset2[, "idade_i"]))
dataset2 = dataset2[, c(1, 2, 13, 4:12)]
colnames(dataset2)[3] = "idade_i"
#Inicializando as linhas que possuem valor NA nas colunas sexo_i, class_glasgow, PAS, FR, RTS_UE, ISS_UE, triss_UE, NISS_UE, NTRISS_UE
dataset2[is.na(dataset2)] = 0
#Remocao de linhas que possuem valores no campo condicao_alta_i que nao 'possuem' significado
dataset2 = dataset2[dataset2$condicao_alta_i != "6",]
dataset2 = dataset2[dataset2$condicao_alta_i != "7",]
dataset2 = dataset2[dataset2$condicao_alta_i != "8",]
#Juncao de valores parecidos no campo condicao_alta_i
dataset2[dataset2$condicao_alta_i == "1 - Obito", "condicao_alta_i"] = "Obito"
dataset2[dataset2$condicao_alta_i == "obito", "condicao_alta_i"] = "Obito"
dataset2[dataset2$condicao_alta_i == "2", "condicao_alta_i"] = "Estado Vegetativo Persistente"
dataset2[dataset2$condicao_alta_i == "2 - Estado Vegetativo Persistente", "condicao_alta_i"] = "Estado Vegetativo Persistente"
dataset2[dataset2$condicao_alta_i == "3 - Limitacao Graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "limitacoes graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "4 - Limitacoes Moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "limitacoes moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "5 - Boa Recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "boa recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "alta a pedido", "condicao_alta_i"] = "Alta a Pedido"
dataset2[dataset2$condicao_alta_i == "evasao", "condicao_alta_i"] = "Evasao"
dataset2[dataset2$condicao_alta_i == "transferencia", "condicao_alta_i"] = "Transferencia"
#Desconsiderar condicao_alta_i = (Alta a Pedido, Evasao, Transferencia)
dataset2 = dataset2[dataset2$condicao_alta_i != "Alta a Pedido",]
dataset2 = dataset2[dataset2$condicao_alta_i != "Evasao",]
dataset2 = dataset2[dataset2$condicao_alta_i != "Transferencia",]
#
dataset2$condicao_alta_i = droplevels(dataset2$condicao_alta_i)
dataset2 = dataset[, c(1, 20, 7, 66, 67, 68, 92, 90, 93, 91, 95, 37)]
dataset2 = dataset2[dataset2$sexo_i != "D",]
dataset2$sexo_i = droplevels(dataset2$sexo_i)
#Tratanto sexo como inteiro (F = 0, M = 1)
levels(dataset2$sexo_i) = c(levels(dataset2$sexo_i), 0, 1)
dataset2[dataset2$sexo_i == "F", "sexo_i"] = 0
dataset2[dataset2$sexo_i == "M", "sexo_i"] = 1
dataset2$sexo_i = droplevels(dataset2$sexo_i)
dataset2[, "aux"] = as.numeric(as.matrix(dataset2[, "sexo_i"]))
dataset2 = dataset2[, c(1, 13, 3:12)]
colnames(dataset2)[2] = "sexo_i"
#Algumas linhas tem idade NULL e o campo quando e carregado nao fica com tipo numerico
dataset2 = dataset2[dataset2$idade_i != "NULL",]
dataset2[, "aux"] = as.numeric(as.matrix(dataset2[, "idade_i"]))
dataset2 = dataset2[, c(1, 2, 13, 4:12)]
colnames(dataset2)[3] = "idade_i"
#Inicializando as linhas que possuem valor NA nas colunas sexo_i, class_glasgow, PAS, FR, RTS_UE, ISS_UE, triss_UE, NISS_UE, NTRISS_UE
dataset2[is.na(dataset2)] = 0
#Remocao de linhas que possuem valores no campo condicao_alta_i que nao 'possuem' significado
dataset2 = dataset2[dataset2$condicao_alta_i != "6",]
dataset2 = dataset2[dataset2$condicao_alta_i != "7",]
dataset2 = dataset2[dataset2$condicao_alta_i != "8",]
dataset2[dataset2$condicao_alta_i == "1 - Obito", "condicao_alta_i"] = "Obito"
dataset2[dataset2$condicao_alta_i == "obito", "condicao_alta_i"] = "Obito"
dataset2[dataset2$condicao_alta_i == "2", "condicao_alta_i"] = "Estado Vegetativo Persistente"
dataset2[dataset2$condicao_alta_i == "2 - Estado Vegetativo Persistente", "condicao_alta_i"] = "Estado Vegetativo Persistente"
dataset2[dataset2$condicao_alta_i == "4 - Limitacoes Moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "limitacoes moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "5 - Boa Recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "boa recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "alta a pedido", "condicao_alta_i"] = "Alta a Pedido"
dataset2[dataset2$condicao_alta_i == "evasao", "condicao_alta_i"] = "Evasao"
dataset2[dataset2$condicao_alta_i == "transferencia", "condicao_alta_i"] = "Transferencia"
dataset2[dataset2$condicao_alta_i == "3 - Limitacao Graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "limitacoes graves", "condicao_alta_i"] = "Limitacoes Graves"
levels(dataset2$condicao_alta_i)
levels(dataset2$condicao_alta_i)["Limitacao Graves"]
levels(dataset2$condicao_alta_i)[17]
levels(dataset2$condicao_alta_i)[17] = "Limitacoes Graves"
levels(dataset2$condicao_alta_i)[17]
dataset2[dataset2$condicao_alta_i == "3 - Limitacao Graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "limitacoes graves", "condicao_alta_i"] = "Limitacoes Graves"
levels(dataset2$condicao_alta_i)  = c(levels(dataset2$condicao_alta_i), "Limitacoes Graves")
dataset2[dataset2$condicao_alta_i == "3 - Limitacao Graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "limitacoes graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2 = dataset[, c(1, 20, 7, 66, 67, 68, 92, 90, 93, 91, 95, 37)]
dataset2 = dataset2[dataset2$sexo_i != "D",]
dataset2$sexo_i = droplevels(dataset2$sexo_i)
#Tratanto sexo como inteiro (F = 0, M = 1)
levels(dataset2$sexo_i) = c(levels(dataset2$sexo_i), 0, 1)
dataset2[dataset2$sexo_i == "F", "sexo_i"] = 0
dataset2[dataset2$sexo_i == "M", "sexo_i"] = 1
dataset2$sexo_i = droplevels(dataset2$sexo_i)
dataset2[, "aux"] = as.numeric(as.matrix(dataset2[, "sexo_i"]))
dataset2 = dataset2[, c(1, 13, 3:12)]
colnames(dataset2)[2] = "sexo_i"
#Algumas linhas tem idade NULL e o campo quando e carregado nao fica com tipo numerico
dataset2 = dataset2[dataset2$idade_i != "NULL",]
dataset2[, "aux"] = as.numeric(as.matrix(dataset2[, "idade_i"]))
dataset2 = dataset2[, c(1, 2, 13, 4:12)]
colnames(dataset2)[3] = "idade_i"
#Inicializando as linhas que possuem valor NA nas colunas sexo_i, class_glasgow, PAS, FR, RTS_UE, ISS_UE, triss_UE, NISS_UE, NTRISS_UE
dataset2[is.na(dataset2)] = 0
#Remocao de linhas que possuem valores no campo condicao_alta_i que nao 'possuem' significado
dataset2 = dataset2[dataset2$condicao_alta_i != "6",]
dataset2 = dataset2[dataset2$condicao_alta_i != "7",]
dataset2 = dataset2[dataset2$condicao_alta_i != "8",]
dataset2[dataset2$condicao_alta_i == "1 - Obito", "condicao_alta_i"] = "Obito"
dataset2[dataset2$condicao_alta_i == "obito", "condicao_alta_i"] = "Obito"
dataset2[dataset2$condicao_alta_i == "2", "condicao_alta_i"] = "Estado Vegetativo Persistente"
dataset2[dataset2$condicao_alta_i == "2 - Estado Vegetativo Persistente", "condicao_alta_i"] = "Estado Vegetativo Persistente"
levels(dataset2$condicao_alta_i)  = c(levels(dataset2$condicao_alta_i), "Limitacoes Graves")
dataset2[dataset2$condicao_alta_i == "3 - Limitacao Graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "limitacoes graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "4 - Limitacoes Moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "limitacoes moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "5 - Boa Recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "boa recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "alta a pedido", "condicao_alta_i"] = "Alta a Pedido"
dataset2[dataset2$condicao_alta_i == "evasao", "condicao_alta_i"] = "Evasao"
dataset2[dataset2$condicao_alta_i == "transferencia", "condicao_alta_i"] = "Transferencia"
#Desconsiderar condicao_alta_i = (Alta a Pedido, Evasao, Transferencia)
dataset2 = dataset2[dataset2$condicao_alta_i != "Alta a Pedido",]
dataset2 = dataset2[dataset2$condicao_alta_i != "Evasao",]
dataset2 = dataset2[dataset2$condicao_alta_i != "Transferencia",]
#
dataset2$condicao_alta_i = droplevels(dataset2$condicao_alta_i)
levels(dataset2$condicao_alta_i)
dataset2[dataset2$condicao_alta_i == "4 - Limitacoes Moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "limitacoes moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "5 - Boa Recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "boa recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "alta a pedido", "condicao_alta_i"] = "Alta a Pedido"
dataset2[dataset2$condicao_alta_i == "evasao", "condicao_alta_i"] = "Evasao"
dataset2[dataset2$condicao_alta_i == "transferencia", "condicao_alta_i"] = "Transferencia
dataset2 = dataset2[dataset2$condicao_alta_i != "Alta a Pedido",]
dataset2 = dataset2[dataset2$condicao_alta_i != "Evasao",]
dataset2 = dataset2[dataset2$condicao_alta_i != "Transferencia",]
#
dataset2$condicao_alta_i = droplevels(dataset2$condicao_alta_i)
summary(dataset2$condicao_alta_i)
dataset2[dataset2$condicao_alta_i == "Limitacao Graves", "condicao_alta_i"] = "Limitacoes Graves"
summary(dataset2$condicao_alta_i)
dataset2$condicao_alta_i = droplevels(dataset2$condicao_alta_i)
dataset3 = dataset2
dataset2$condicao_alta_i != "Obito" && dataset2$condicao_alta_i != "Limitacoes Graves"
dataset2$condicao_alta_i != "Limitacoes Graves"
(dataset2$condicao_alta_i != "Obito") && (dataset2$condicao_alta_i != "Limitacoes Graves")
dataset2[(dataset2$condicao_alta_i != "Obito") && (dataset2$condicao_alta_i != "Limitacoes Graves"), "condicao_alta_i"]
dataset2[dataset2$condicao_alta_i != "Obito" && dataset2$condicao_alta_i != "Limitacoes Graves", "condicao_alta_i"]
levels(dataset2$condicao_alta_i) = c(levels(dataset2$condicao_alta_i), "Nao Obito")
dataset2[dataset2$condicao_alta_i != "Obito" && dataset2$condicao_alta_i != "Limitacoes Graves", "condicao_alta_i"] = "Nao Obito"
dataset2$condicao_alta_i = droplevels(dataset2$condicao_alta_i)
levels(dataset2$condicao_alta_i) = c(levels(dataset2$condicao_alta_i), 0, 1, 2)
dataset2[dataset2$condicao_alta_i == "Nao Obito", "condicao_alta_i"] = 0
dataset2[dataset2$condicao_alta_i == "Obito", "condicao_alta_i"] = 1
dataset2[dataset2$condicao_alta_i == "Limitacoes Graves", "condicao_alta_i"] = 2
dataset2$condicao_alta_i = droplevels(dataset2$condicao_alta_i)
dataset2[, "aux"] = as.numeric(as.matrix(dataset2[, "condicao_alta_i"]))
dataset2 = dataset2[, c(1:11, 13)]
colnames(dataset2)[12] = "condicao_alta_i"
levles(dataset2$condicao_alta_i)
leveks(dataset2$condicao_alta_i)
levels(dataset2$condicao_alta_i)
dataset2$condicao_alta_i
summary(dataset2$condicao_alta_i)
dataset2 = dataset3
levels(dataset2$condicao_alta_i) = c(levels(dataset2$condicao_alta_i), "Nao Obito")
summary(dataset2$condicao_alta_i)
levels(dataset2$condicao_alta_i)
dataset2[dataset2$condicao_alta_i != "Obito" && dataset2$condicao_alta_i != "Limitacoes Graves", "condicao_alta_i"] = "Nao Obito"
summary(dataset2$condicao_alta_i)
dataset2[dataset2$condicao_alta_i != "Obito" && dataset2$condicao_alta_i != "Limitacoes Graves", "condicao_alta_i"]
nrow(dataset2[dataset2$condicao_alta_i != "Obito" && dataset2$condicao_alta_i != "Limitacoes Graves", "condicao_alta_i"])
count(dataset2[dataset2$condicao_alta_i != "Obito" && dataset2$condicao_alta_i != "Limitacoes Graves", "condicao_alta_i"])
dataset2[dataset2$condicao_alta_i != "Obito" && dataset2$condicao_alta_i != "Limitacoes Graves", "condicao_alta_i"]
dataset2[dataset2$condicao_alta_i != "Obito", "condicao_alta_i"]
nrow(dataset2[dataset2$condicao_alta_i != "Obito", "condicao_alta_i"])
ncol(dataset2[dataset2$condicao_alta_i != "Obito", "condicao_alta_i"])
class(dataset2[dataset2$condicao_alta_i != "Obito", "condicao_alta_i"])
summary(dataset2[dataset2$condicao_alta_i != "Obito", "condicao_alta_i"])
dataset2 = dataset3
levels(dataset2$condicao_alta_i) = c(levels(dataset2$condicao_alta_i), "Nao Obito")
dataset2 = dataset3
levels(dataset2$condicao_alta_i) = c(levels(dataset2$condicao_alta_i), "Nao Obito")
summary(dataset2[dataset2$condicao_alta_i != "Obito", "condicao_alta_i"])
dataset2 = dataset3
summary(dataset2[dataset2$condicao_alta_i != "Obito", "condicao_alta_i"])
summary(dataset[datase2$condicao_alta_i != "Obito", "condicao_alta_i"])
summary(dataset[datase$condicao_alta_i != "Obito", "condicao_alta_i"])
summary(dataset[dataset$condicao_alta_i != "Obito", "condicao_alta_i"])
dataset2 = dataset[, c(1, 20, 7, 66, 67, 68, 92, 90, 93, 91, 95, 37)]
#Removendo linhas com sexo_i = D
dataset2 = dataset2[dataset2$sexo_i != "D",]
dataset2$sexo_i = droplevels(dataset2$sexo_i)
#Tratanto sexo como inteiro (F = 0, M = 1)
levels(dataset2$sexo_i) = c(levels(dataset2$sexo_i), 0, 1)
dataset2[dataset2$sexo_i == "F", "sexo_i"] = 0
dataset2[dataset2$sexo_i == "M", "sexo_i"] = 1
dataset2$sexo_i = droplevels(dataset2$sexo_i)
dataset2[, "aux"] = as.numeric(as.matrix(dataset2[, "sexo_i"]))
dataset2 = dataset2[, c(1, 13, 3:12)]
colnames(dataset2)[2] = "sexo_i"
#Algumas linhas tem idade NULL e o campo quando e carregado nao fica com tipo numerico
dataset2 = dataset2[dataset2$idade_i != "NULL",]
dataset2[, "aux"] = as.numeric(as.matrix(dataset2[, "idade_i"]))
dataset2 = dataset2[, c(1, 2, 13, 4:12)]
colnames(dataset2)[3] = "idade_i"
#Inicializando as linhas que possuem valor NA nas colunas sexo_i, class_glasgow, PAS, FR, RTS_UE, ISS_UE, triss_UE, NISS_UE, NTRISS_UE
dataset2[is.na(dataset2)] = 0
#Remocao de linhas que possuem valores no campo condicao_alta_i que nao 'possuem' significado
dataset2 = dataset2[dataset2$condicao_alta_i != "6",]
dataset2 = dataset2[dataset2$condicao_alta_i != "7",]
dataset2 = dataset2[dataset2$condicao_alta_i != "8",]
#Juncao de valores parecidos no campo condicao_alta_i
dataset2[dataset2$condicao_alta_i == "1 - Obito", "condicao_alta_i"] = "Obito"
dataset2[dataset2$condicao_alta_i == "obito", "condicao_alta_i"] = "Obito"
dataset2[dataset2$condicao_alta_i == "2", "condicao_alta_i"] = "Estado Vegetativo Persistente"
dataset2[dataset2$condicao_alta_i == "2 - Estado Vegetativo Persistente", "condicao_alta_i"] = "Estado Vegetativo Persistente"
levels(dataset2$condicao_alta_i)  = c(levels(dataset2$condicao_alta_i), "Limitacoes Graves")
dataset2[dataset2$condicao_alta_i == "3 - Limitacao Graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "limitacoes graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "Limitacao Graves", "condicao_alta_i"] = "Limitacoes Graves"
dataset2[dataset2$condicao_alta_i == "4 - Limitacoes Moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "limitacoes moderadas", "condicao_alta_i"] = "Limitacoes Moderadas"
dataset2[dataset2$condicao_alta_i == "5 - Boa Recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "boa recuperacao", "condicao_alta_i"] = "Boa Recuperacao"
dataset2[dataset2$condicao_alta_i == "alta a pedido", "condicao_alta_i"] = "Alta a Pedido"
dataset2[dataset2$condicao_alta_i == "evasao", "condicao_alta_i"] = "Evasao"
dataset2[dataset2$condicao_alta_i == "transferencia", "condicao_alta_i"] = "Transferencia"
#Desconsiderar condicao_alta_i = (Alta a Pedido, Evasao, Transferencia)
dataset2 = dataset2[dataset2$condicao_alta_i != "Alta a Pedido",]
dataset2 = dataset2[dataset2$condicao_alta_i != "Evasao",]
dataset2 = dataset2[dataset2$condicao_alta_i != "Transferencia",]
#
dataset2$condicao_alta_i = droplevels(dataset2$condicao_alta_i)
summary(dataset2[dataset2$condicao_alta_i != "Obito", "condicao_alta_i"])
summary(dataset[dataset$condicao_alta_i != "Limitacaoes Graves", "condicao_alta_i"])
summary(dataset2[dataset2$condicao_alta_i != "Limitacaoes Graves", "condicao_alta_i"])
summary(dataset2[dataset2$condicao_alta_i != "Limitacoes Graves", "condicao_alta_i"])
summary(dataset2[dataset2$condicao_alta_i != "Obito" && dataset2$condicao_alta_i != "Limitacoes Graves", "condicao_alta_i"])
summary(dataset2[(dataset2$condicao_alta_i != "Obito" && dataset2$condicao_alta_i != "Limitacoes Graves"), "condicao_alta_i"])
summary(dataset2[(dataset2$condicao_alta_i != "Obito") && (dataset2$condicao_alta_i != "Limitacoes Graves"), "condicao_alta_i"])
iris
require(FNN)
dataset = iris
summary dataset
summary( dataset)
str( dataset)
head( dataset)
nrow(iris)
teste = knn(iris[1:100, 1:4], iris[101:150, 1:4], iris[1:100, 5])
require(SSL)
require(mp)
lamp.result = mp::lamp(iris[101:150, 1:4])
plot(lamp.result, col = iris[101:150, 5])
iris[101:150, 5]
sort(iris)
sort?
)
?sort
?sort()
sort(iris[101:150])
runif(5)
?runif
?set.seed
iris
nrow(iris)
runif(nrow(iris))
a = runif(nrow(iris))
iris = iris[order(a), ]
iris
ls
?order()
order(1, 3, 10, 0, -3)
order(1, 3, 10, 0, -3)
order(1, 3, 10, 0, -3)
order(1, 3, 10, 0, -3)
runif(5)
runif(3)
a = runif(3)
order(a)
order(a)
order(a, decreasing = TRUE)
a = runif(5)
order(a)
?ruinif
?runif
runif(5)
order(runif(5))
iris
knn
require(FNN)
teste = knn(iris[1:100, 1:4], iris[101:150, 1:4], iris[1:100, 5])
table(iris[101:150, ], teste)
table(iris[101:150, 5], teste)
require(class)
l = c(1, 1, 2, 3, 5, 8 , 13, 21)
mean(l)
sd(l)
summary(l)
sd(l)
require(mp)
data()
iris3
str(iris3)
summary(iris3)
iris
iris
require(FNN)
?knn
?kmeans()
require(FNN)
?knn.cv
require(e1071)
?svm
iris
install.packages(soundecology)
install.packages("soundecology")
require(soundecology)
?soundecology::acoustic_complexity()
?soundecology::acoustic_complexity
?soundecology::acoustic_diversity
data("tropicalsound")
result = acoustic_diversity(tropicalsound)
result
?soundecology::acoustic_complexity
?soundecology::acoustic_evenness
?soundecology::bioacoustic_index
?mp::lsp
?soundecology::acoustic_evenness
?kmeans
install.packages(dbscan)
install.packages("dbscan")
?dbscan
require(dbscan)
?dbscan
remove.packages(ape)
remove.packages("ape")
exit
?caret::confusionMatrix()
?caret::confusionMatrix
require(AUC)
?roc_curve
AUC::roc_curve
?caret::confusionMatrix
?caret::confusionMatrix
heatmap(iris[, 1:4])
?heatmap
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
utils::str(hv)
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
as
as.matrix(iris[ ,1:4])
heatmap(as.matrix(iris[ ,1:4]))
heatmap(as.matrix(iris[1:10 ,1:4]))
heatmap(as.matrix(iris[1:50 ,1:4]))
heatmap(as.matrix(iris[1:50 ,1:4]), reorderfun = NULL)
heatmap(as.matrix(iris[ ,1:4]))
heatmap(as.matrix(iris[1:10 ,1:4]))
heatmap(as.matrix(iris[1:10 ,1:4]), keep.dendro = false)
heatmap(as.matrix(iris[1:10 ,1:4]), keep.dendro = FALSE)
heatmap(as.matrix(iris[1:10 ,1:4]), keep.dendro = FALSE)
heatmap(as.matrix(iris[1:10 ,1:4]), keep.dendro = TRUE)
teste = as.matrix(mtcars)
teste = as.matrix(scale(mtcars))
head(teste)
heatmap(teste)
heatmap(teste, scale = 'none')
heatmap(teste, scale = 'none', Colv = F)
heatmap(teste, scale = 'none', Colv = F)
?scale
iris[1:10]
iris[1:10, ]
scale(iris[1:10, ])
iris[1:10, 1:4]
teste = as.matrix(iris[, 1:4])
teste
heatmap(teste)
heatmap(teste, reorderfun = reorder(d, w))
heatmap(teste, reorderfun = reorder
)
heatmap(teste, reorderfun = function)
heatmap(teste, scale = "row")
heatmap(teste, scale = "col")
heatmap(teste, scale = "none")
heatmap(teste, scale = "none", keep.dendro = TRUE)
heatmap(teste, scale = "none", keep.dendro = FALSE)
heatmap(teste, scale = "none", Rowv = NA, Colv = NA, keep.dendro = FALSE)
heatmap(teste, scale = "none", Rowv = NA, Colv = NA, keep.dendro = TRUE)
heatmap(teste, scale = "none", Rowv = NA, Colv = NA)
heatmap(teste[1:50, ], scale = "none", Rowv = NA, Colv = NA)
heatmap(teste[1:50, ], scale = "none", Rowv = NA)
heatmap(teste[1:50, ], scale = "none", Rowv = NA, Colv = NA)
heatmap(teste[1:50, ], scale = "none", Rowv = NA, Colv = NA, scale = "nrow")
heatmap(teste[1:50, ], scale = "none", Rowv = NA, Colv = NA, scale = "row")
heatmap(teste[1:50, ], scale = "none", Rowv = NA, Colv = NA)
heatmap(teste[1:50, ], scale = "row", Rowv = NA, Colv = NA)
heatmap(teste[1:50, ], scale = "col", Rowv = NA, Colv = NA)
heatmap(teste[1:50, 1:2], scale = "col", Rowv = NA, Colv = NA)
heatmap(teste[1:50, 1:3], scale = "col", Rowv = NA, Colv = NA)
heatmap(teste[1:50, 1:4], scale = "col", Rowv = NA, Colv = NA)
heatmap(teste[1:50, 1:4], scale = "row", Rowv = NA, Colv = NA)
heatmap(teste[1:50, 1:4], scale = "none", Rowv = NA, Colv = NA)
setwd("~/Documentos/Mestrado/Pesquisa/Soundscape/OceanNetworksCanada/bin")
teste <- read.csv("~/Documentos/Mestrado/Pesquisa/Soundscape/OceanNetworksCanada/bin/teste.csv", sep=";")
View(teste)
require(mp)
lsp.result = lsp(teste)
plot(lsp.result)
lamp.result = lamp()
lamp.result = lamp(teste)
plot(lamp.result)
plmp.result = plmp(teste)
force.result = forceScheme(dist(teste))
plot(force.result)
summary(teste)
teste2 = teste
teste[, c(5, 6, 21, 22, 29, 43, 64)]
summary(teste[, c(5, 6, 21, 22, 29, 43, 64)])
sd(teste[, c(5, 6, 21, 22, 29, 43, 64)])
sd(teste[, 5])
unique(teste[ , 5])
a = unique(teste[ , 5])
table(a)
nrow(a)
dim(a)
count(a)
size(a)
length(a)
sd(a)
summary(a)
a = unique(teste[ , 6])
length(a)
sd(a)
summary(a)
plot(a)
source('~/.active-rstudio-document', echo=TRUE)
plot(a, type = "l")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
lsp.result = lsp(teste[, c(1:4, 8, 12:16, 45, 61)])
plot(lsp.result)
lamp.result = lamp(teste[, c(1:4, 8, 12:16, 45, 61)])
plot(lamp.result)
plmp.result = plmp(teste[, c(1:4, 8, 12:16, 45, 61)])
plot(plmp.result)
tsne.result = tSNE(teste[, c(1:4, 8, 12:16, 45, 61)])
plot(tsne.result)
force.result = forceScheme(dist(teste[, c(1:4, 8, 12:16, 45, 61)]))
plot(force.result)
